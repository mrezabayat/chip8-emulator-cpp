name: CMake (Conan)

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    name: ${{ matrix.os }} ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            build_type: Release
            build_preset: conan-release
            test_preset: conan-release
          - os: windows-latest
            build_type: Release
            build_preset: conan-release
            test_preset: conan-release

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Cache Conan packages
        uses: actions/cache@v3
        with:
          path: ~/.conan2
          key: ${{ runner.os }}-conan-${{ hashFiles('conanfile.txt') }}
          restore-keys: |
            ${{ runner.os }}-conan-

      - name: Install Conan
        run: python -m pip install --upgrade pip conan

      - name: Install system packages (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libegl-dev libegl1-mesa-dev

      - name: Set up MSVC
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - name: Detect Conan profile
        run: conan profile detect --force

      - name: Install dependencies with Conan
        run: |
          conan install . \
            --build=missing \
            -s build_type=${{ matrix.build_type }} \
            --output-folder=build/${{ matrix.build_type }}

      - name: Configure CMake
        run: cmake --preset ${{ matrix.build_preset }}

      - name: Build
        run: cmake --build --preset ${{ matrix.build_preset }}

      - name: Test
        run: ctest --preset ${{ matrix.test_preset }} --output-on-failure
