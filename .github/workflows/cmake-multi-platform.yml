name: CMake (Conan)

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    name: ${{ matrix.os }} ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            build_type: Release
            configure_preset: conan-release
            build_preset: conan-release
            test_preset: conan-release
          - os: windows-latest
            build_type: Release
            configure_preset: conan-default
            build_preset: conan-release
            test_preset: conan-release

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Cache Conan packages
        uses: actions/cache@v3
        with:
          path: ~/.conan2
          key: ${{ runner.os }}-conan-${{ hashFiles('conanfile.txt') }}
          restore-keys: |
            ${{ runner.os }}-conan-

      - name: Install Conan
        run: python -m pip install --upgrade pip conan

      - name: Install system packages (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libegl-dev \
            libegl1-mesa-dev \
            xorg-dev \
            libglu1-mesa-dev \
            libdrm-dev \
            libgbm-dev \
            libasound2-dev \
            libpulse-dev \
            libudev-dev \
            libdbus-1-dev \
            libibus-1.0-dev \
            libx11-xcb-dev \
            libfontenc-dev \
            libice-dev \
            libsm-dev \
            libxaw7-dev \
            libxcomposite-dev \
            libxcursor-dev \
            libxdamage-dev \
            libxext-dev \
            libxfixes-dev \
            libxi-dev \
            libxinerama-dev \
            libxkbfile-dev \
            libxmu-dev \
            libxmuu-dev \
            libxpm-dev \
            libxrandr-dev \
            libxrender-dev \
            libxres-dev \
            libxss-dev \
            libxt-dev \
            libxtst-dev \
            libxv-dev \
            libxxf86vm-dev \
            libxcb-glx0-dev \
            libxcb-render0-dev \
            libxcb-render-util0-dev \
            libxcb-xkb-dev \
            libxcb-icccm4-dev \
            libxcb-image0-dev \
            libxcb-keysyms1-dev \
            libxcb-randr0-dev \
            libxcb-shape0-dev \
            libxcb-sync-dev \
            libxcb-xfixes0-dev \
            libxcb-xinerama0-dev \
            libxcb-dri3-dev \
            uuid-dev \
            libxcb-cursor-dev \
            libxcb-dri2-0-dev \
            libxcb-present-dev \
            libxcb-composite0-dev \
            libxcb-ewmh-dev \
            libxcb-res0-dev \
            libxcb-util-dev \
            libxcb-util0-dev

      - name: Set up MSVC
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - name: Detect Conan profile
        run: conan profile detect --force

      - name: Install dependencies with Conan
        run: |
          args=(
            --build=missing
            -s build_type=${{ matrix.build_type }}
            --output-folder=build/${{ matrix.build_type }}
          )
          if [ "${{ runner.os }}" = "Windows" ]; then
            args+=(-s compiler.cppstd=20)
          fi
          conan install . "${args[@]}"

      - name: Configure CMake
        run: cmake --preset ${{ matrix.configure_preset }}

      - name: Build
        if: runner.os != 'Windows'
        run: cmake --build --preset ${{ matrix.build_preset }}

      - name: Build (Windows)
        if: runner.os == 'Windows'
        run: cmake --build --preset ${{ matrix.build_preset }} --config ${{ matrix.build_type }}

      - name: Test
        if: runner.os != 'Windows'
        run: ctest --preset ${{ matrix.test_preset }} --output-on-failure

      - name: Test (Windows)
        if: runner.os == 'Windows'
        run: ctest --preset ${{ matrix.test_preset }} --output-on-failure --build-config ${{ matrix.build_type }}
